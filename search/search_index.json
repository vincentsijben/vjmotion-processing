{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Processing Library Template","text":"<p>The Processing Library Template is a template to help developers of Processing libraries to develop and release. It can be found on Github at https://github.com/processing/processing-library-template.</p> <p></p> <p>This documentation provides information on</p> <ol> <li>Getting started</li> <li>The development process</li> <li>Releasing your library</li> <li>Troubleshooting</li> </ol> <p>Note</p> <p>This template is based on Gradle. If you are looking for the old Ant-based template, see processing/processing-library-template-ant</p>"},{"location":"index.html#references","title":"References","text":"<p>Existing references for developing libraries for Processing can be found on the following Github wiki pages:</p> <ul> <li>https://github.com/processing/processing4/wiki/Library-Basics</li> <li>https://github.com/processing/processing4/wiki/Library-Guidelines</li> <li>https://github.com/processing/processing4/wiki/Library-Overview</li> </ul>"},{"location":"index.html#contributors","title":"Contributors","text":"<p>This template was created as part of the 2024 New Beginnings (pr05) Grant from the Processing Foundation, to simplify the workflows for libraries, tools, and modes, mentored by @Stefterv.</p> <p>It is based on and inspired by a number of Processing library templates, including:</p> <ul> <li>https://github.com/processing/processing-library-template-gradle</li> <li>https://github.com/enkatsu/processing-library-template-gradle</li> <li>https://github.com/hamoid/processing-library-template/</li> </ul> <p>I wish to thank the developers of these repositories, who generously provided guidance and time. This template has been developed in collaboration with @enkatsu.</p> <p>The example library was developed by Stig M\u00f8ller Hansen (@stixan).</p>"},{"location":"arduinocontrols.html","title":"ArduinoControls","text":"<p>This ArduinoControls class is used at the Maastricht Institute of Arts exposition during the \"Generative Art\" semester. Students build their own Arduino remote controller with 3 potentiometers, 3 pushbuttons and 3 LEDs.</p> <p>This library simplifies the use for these controls. It adds functionality like:  - executing single commands when longpressing pushbuttons;  - multiple pushbuttons being pressed  - smooth analog potmeter values, reducing 'jumping' values  - fallback to keyboard and mouse when not using arduino  - only write LED once instead of continuously, preventing flickering</p>"},{"location":"arduinocontrols.html#usage","title":"Usage","text":"<p>Be sure to check the console to find the correct serial port. In this example port 3 (index 2) is used. <pre><code>// Import the library to your sketch\nimport bpm.library.arduinocontrols.*;\n\n// Import the arduino and serial libraries\nimport processing.serial.*;\nimport cc.arduino.*;\n\nArduino arduino;\nArduinoControls ac;\n\nvoid setup() {\n  size(500, 500);\n\n  println(Arduino.list());\n  arduino = new Arduino(this, Arduino.list()[2], 57600);\n\n  ac = new ArduinoControls(this)\n    .addArduino(arduino)\n    .addLED(13)\n    ;\n}\n\nvoid draw() {\n  background(50);\n\n  // if mouse position is to the left, turn LED on, else turn it off\n  if (mouseX &lt; width/2) ac.setLED(0, 1);\n  else ac.setLED(0, 0);\n\n  text(\"on\", width/4, height/2);\n  text(\"off\", width/4*3, height/2);\n  stroke(255, 0, 0);\n  line(width/2, 0, width/2, height);\n}\n</code></pre></p> <p>The ArduinoControls class provides the following main functions: * <code>setLEDToOn(0)</code> function that turns on the LED with index 0. If it's an LED that was set up with PWM, it uses <code>255</code>, else <code>Arduino.High</code>. * <code>setLEDToOff(2)</code> function that turns off the LED with index 2. * <code>setLED(0,200)</code> function that sets the value of LED with index 0 to 200. All values set to LEDs are only set once in draw() to prevent flickering. * <code>getPushButton(0)</code> function that returns true while the pushbutton with index 0 is being pushed. * <code>getPushButtonOnce(0)</code> function that returns true if the pushbutton with index 0 was pushed. Only returns true for the duration of 1 frame. * <code>getPotentiometer(0)</code> functon that returns the raw normalized value from potentiometer with index 0, without any smoothing * <code>getPotentiometer(0, 0.5)</code> functon that returns the smoothed normalized value from potentiometer with index 0. Smoothness is a value between 0 and 1 which adds a little delay.</p> <p>You can tweak the behaviour of this library with the following functions (you can also chain them when initializing your arduinocontrols object for clarity): * <code>.addArduino(arduino)</code> mandatory to add the global arduino object to the class. If you omit it, the keypresses associated with all controls will be enabled. * <code>.addLED(9)</code> to add an LED to the class at digital port 9. * <code>.addLED(10, LEDMode.PWM)</code> to add an LED to the class at digital port 10 as a PWM connected LED. The LEDMode argument is optional (default is <code>LEDMode.DIGITAL</code>). * <code>.addPushButton(7, '1', Arduino.LOW)</code> to add a pushbutton to the class at digital port 7, that is controllable with the keyboard key '1' when not connected and has a value of Arduino.LOW when pressed. All three arguments are mandatory. * <code>.addPotentiometer(0, 'q')</code> to add a potentiometer to the class at analog port 0, that is controllable with the mouseX position while pressing the keyboard key 'q'. Both arguments are mandatory. * <code>.showInfoPanel()</code> to show the infopanel. * <code>.setInfoPanelY(n)</code> to offset the starting y-position of the infopanel by n pixels. Useful for when you have multiple infopanels to get them all lined up. * <code>.setInfoPanelKey('u')</code> to change the hotkey to toggle the infopanel. Useful for when you have multiple infopanels. Defaults to 'i'. * <code>.disableKeyPress()</code> to disable listening for keypresses. If you don't disable keypresses, then the keys you provided as arguments for pushbuttons and potentiometers will work</p>"},{"location":"arduinocontrols.html#examples","title":"Examples","text":"<p>You can find all these examples in <code>Processing -&gt; File - Examples - Contributed Libraries - BPM timings - ArduinoControls</code>.</p> example titleimage example example titleimage example example titleimage example example titleimage example example titleimage example example titleimage example"},{"location":"bpm.html","title":"BPM functions","text":"<p>The BeatsPerMinute class provides the following main functions: * <code>linear()</code> function that returns a normalized linear progress value from 0 to 1 for any given amount of beats, or with a given delay:   * <code>linear()</code> returns progress in 1 beat   * <code>linear(4)</code> returns progress in 4 beats   * <code>linear(4,3)</code> returns progress in 4 beats, with a delay of 3 beats * <code>ease()</code> same as <code>linear()</code> but does not use a linear progression but an 'eased' or 'smooth' one. Again, can be called without arguments, with 1 argument (duration in beats) or with two (duration and delay in beats). * <code>linearBounce()</code> same as <code>linear()</code> but goes from 0 to 1 to 0 in the same amount of time. Useful for shrinking or growing of visuals. * <code>easeBounce()</code> same as <code>ease()</code> but goes from 0 to 1 to 0 in the same amount of time. Useful for shrinking or growing of visuals. * <code>every[n]</code> boolean that returns true every n beats. Returns true for the duration of 1 beat. Limited to a max of 16 beats. * <code>every_once[n]</code> same as <code>every[n]</code> but now the boolean returns true for only 1 frame. Useful for changing a variable once every n beats. * <code>getBPM()</code> to return the current BPM. * <code>getBeatCount()</code> to return the current beatcount. * <code>getSurfaceTitle()</code> show information on BPM, beatCount and frameRate in your surface title. To be used in your main sketch like <code>surface.setTitle(bpm.getSurfaceTitle());</code></p> <p>A more advanced progression function <code>adsr()</code> that uses attack, decay, sustain and release options to control the (linear) progression: * <code>adsr(0.2)</code> function that uses an attack of 20% to get from 0 to 1 and stay at 1 for the remainder of the beat * <code>adsr(0.2, 0.4, 0.5, 0.1)</code> function that uses an attack of 20% to get from 0 to 1, a decay of 40% to get to 0.5, stay for 30% of the time at that 0.5 and uses a release of 10% to get from 0.5 to 0. * <code>adsr(0.2, 0.4, 0.5, 0.1, 2)</code> similar as the previous one, but with an additional parameter for duration in beats. In this case to animate over 2 beats. * <code>adsr(0.2, 0.4, 0.5, 0.1, 2, 1)</code> similar as the previous one, but with an additional parameter for delay in beats. In this case delay of 1 beat.</p> <p>You can tweak the behaviour of this library with the following functions (you can also chain them when initializing your bpm object for clarity): * <code>.setBPM(120)</code> to change the amount of beats per minute for all calculations. * <code>.showInfoPanel()</code> to show the infopanel. * <code>.setInfoPanelY(n)</code> to offset the starting y-position of the infopanel by n pixels. Useful for when you have multiple infopanels to get them all lined up. * <code>.setInfoPanelKey('u')</code> to change the hotkey to toggle the infopanel. Useful for when you have multiple infopanels. Defaults to 'i'. * <code>.disableKeyPress()</code> to disable listening for keypresses. If you don't disable keypresses, then these keypresses will work by default:   * <code>0</code> press once to reset timer, press multiple times to set the BPM to your 'press'-timing   * <code>-</code> lower bpm   * <code>+</code> raise bpm</p>"},{"location":"bpm.html#examples","title":"Examples","text":"<p>You can find all these examples in <code>Processing -&gt; File - Examples - Contributed Libraries - VJMotion - BPM</code>.</p> animatedSVG beatCount animatedSVG delay metronome randomcolor randomGridSpots rotatingSVG adsr"},{"location":"contribute.html","title":"Contribute","text":"<p>Note</p> <p>This template is based on Gradle. </p>"},{"location":"contribute.html#references","title":"References","text":"<p>Existing references for developing libraries for Processing can be found on the following Github wiki pages:</p> <ul> <li>https://github.com/processing/processing4/wiki/Library-Basics</li> <li>https://github.com/processing/processing4/wiki/Library-Guidelines</li> <li>https://github.com/processing/processing4/wiki/Library-Overview</li> </ul>"},{"location":"contribute.html#contributors","title":"Contributors","text":"<p>This template was created as part of the 2024 New Beginnings (pr05) Grant from the Processing Foundation, to simplify the workflows for libraries, tools, and modes, mentored by @Stefterv.</p> <p>It is based on and inspired by a number of Processing library templates, including:</p> <ul> <li>https://github.com/processing/processing-library-template-gradle</li> <li>https://github.com/enkatsu/processing-library-template-gradle</li> <li>https://github.com/hamoid/processing-library-template/</li> </ul> <p>I wish to thank the developers of these repositories, who generously provided guidance and time. This template has been developed in collaboration with @enkatsu.</p> <p>The example library was developed by Stig M\u00f8ller Hansen (@stixan).</p>"},{"location":"frequencyanalyzer.html","title":"FrequencyAnalyzer","text":"<p>This FrequencyAnalyzer class is used at the Maastricht Institute of Arts exposition during the \"Generative Art\" semester. Students create sketches that react in realtime to audio input (line-in, audio file or microphone).</p> <p>This library adds functionality like:  - easily switch between input modes (audio file, microphone, line-in)  - toggle mute (audio file playing) or monitoring (microphone or line-in)</p> <p>todo:  - return raw or normalized values of specific frequency bands  - reset the max value that is used for mapping normalized values of frequency amplitudes. Can be set to an interval.</p>"},{"location":"frequencyanalyzer.html#usage","title":"Usage","text":"<pre><code>// Import the library to your sketch\nimport bpm.library.frequencyanalyzer.*;\n\n// Import the minim library\nimport ddf.minim.*;\nimport ddf.minim.analysis.*;\n\nMinim minim;\nFrequencyAnalyzer fa;\n\nvoid setup() {\n  size(500, 500);\n\n  minim = new Minim(this);\n  fa = new FrequencyAnalyzer(this)\n    .addMinim(minim)\n    .setFile(\"https://github.com/vincentsijben/bpm-timings-for-processing/raw/main/assets/infraction_music_-_ritmo.mp3\")\n    .setAudioInputMode(AudioInputMode.AUDIO_FILE)\n    ;\n}\n\nvoid draw() {\n  background(50);\n\n  circle(width/4*1, height/2, fa.getAvgRaw(0));\n  circle(width/4*2, height/2, fa.getAvgRaw(10));\n  circle(width/4*3, height/2, fa.getAvgRaw(20));\n}\n</code></pre> <p>The FrequencyAnalyzer class provides the following main functions:</p> <ul> <li><code>getAvgRaw(1)</code> returns non-normalized \"raw\" averaged amplitude for frequency band 1. The index ranges from 0 to logAverages(22, 3) which is 30 by default.</li> <li><code>getAvgRawLeft(1)</code> same as getAvgRaw(1) but specific for the left channel.</li> <li><code>getAvgRawRight(1)</code> same as getAvgRaw(1) but specific for the right channel.</li> </ul> <p>todo:</p> <ul> <li>~~<code>getBand(1)</code> returns the amplitude for frequency band 1. Used for a very specific and narrow frequency range. The index ranges from 0 to specSize().~~</li> <li>~~<code>getBandLeft(1)</code> same as getBand(1) but specific for the left channel.~~</li> <li>~~<code>getBandRight(1)</code> same as getBand(1) but specific for the right channel.~~</li> <li>~~<code>specSize()</code> returns the total amount of bands used. Typically 1025 ~~</li> <li>~~<code>avgSize()</code> returns the total amount of bands used in the logAverages function. Typically 30~~</li> <li>~~<code>getAudioBuffer()</code> returns the mixed (mono) audio buffer.~~</li> <li>~~<code>getLeftChannelBuffer()</code> returns the left audio buffer.~~</li> <li>~~<code>getRightChannelBuffer()</code> returns the right audio buffer.~~</li> </ul> <p>You can tweak the behaviour of this library with the following functions (you can also chain them when initializing your frequencyanalyzer object for clarity): * <code>.addMinim(minim)</code> mandatory to add the global minim object to the class. * <code>.setFile(\"example.mp3\")</code> to set the file for the audioplayer. Defaults to \"https://github.com/vincentsijben/bpm-timings-for-processing/raw/main/assets/infraction_music_-_ritmo.mp3\" * <code>.setAudioInputMode(AudioInputMode.AUDIO_FILE)</code> to set the input mode to AudioInputMode.AUDIO_FILE. You can also set it to AudioInputMode.LINE_IN or AudioInputMode.MICROPHONE. Defaults to AudioInputMode.MICROPHONE.  * <code>.setAudioInputMode(AudioInputMode.AUDIO_FILE, n)</code> same as previous one, but you can also set the bufferSize. Needs to be a power of 2. A lower amount results in less audio resolution and decreases delay . Defaults to 1024. * <code>.setAudioOutputMode(AudioOutputMode.STEREO)</code> to set the output mode to AudioOutputMode.STEREO. Defaults to AudioOutputMode.MONO. Use it to get access to both left and right channel analysis. * <code>.showInfoPanel()</code> to show the infopanel. * <code>.setInfoPanelY(n)</code> to offset the starting y-position of the infopanel by n pixels. Useful for when you have multiple infopanels to get them all lined up. * <code>.setInfoPanelKey('u')</code> to change the hotkey to toggle the infopanel. Useful for when you have multiple infopanels. Defaults to 'i'. * <code>.disableKeyPress()</code> to disable listening for keypresses. If you don't disable keypresses, then these keypresses will work:   * <code>CTRL + 1</code> switch to FILE mode   * <code>CTRL + 2</code> switch to MONO mode   * <code>CTRL + 3</code> switch to STEREO mode   * <code>CTRL + M</code> toggle monitoring on LINE_IN or MICROPHONE input</p>"},{"location":"frequencyanalyzer.html#examples","title":"Examples","text":"<p>You can find all these examples in <code>Processing -&gt; File - Examples - Contributed Libraries - BPM timings - FrequencyAnalyzer</code>.</p> example titleimage example example titleimage example example titleimage example example titleimage example example titleimage example example titleimage example"},{"location":"getting-started.html","title":"Getting Started","text":"<p>Thank you for trying or using this library! It's easy to set up and use. Just follow the instructions.</p>"},{"location":"getting-started.html#setting-up-the-library","title":"Setting up the library","text":"<p>Install the library by downloading the latest release through the Processing contribution manager. Open Processing and go to Sketch &gt; Import Library... &gt; Manage Libraries... , search for VJMotion and click install.</p>"},{"location":"getting-started.html#usage","title":"Usage","text":"<pre><code>import nl.genart.VJMotion.beatsperminute.*;\nBeatsPerMinute bpm;\n\nvoid setup() {\n  size(500, 500);\n  bpm = new BeatsPerMinute(this);\n  bpm.setBPM(30);\n}\n\nvoid draw() {\n  background(50);\n  circle(width/2, height/2, bpm.easeBounce()*500);\n}\n</code></pre>"}]}